#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_LINE_LENGTH 1000

void extract_and_save(const char *input_filename) {
    FILE *input_fp, *output_fp;
    char line[MAX_LINE_LENGTH];
    char output_filename[MAX_LINE_LENGTH]; // Buffer to hold output filename
    int in_macro_section = 0;  // Flag to indicate if we are inside the macro section

    // Open the input file for reading
    input_fp = fopen(input_filename, "r");
    if (input_fp == NULL) {
        perror("Error opening input file");
        return;
    }

    // Read lines from input file
    while (fgets(line, sizeof(line), input_fp) != NULL) {
        // Check if we are inside the macro section
        if (strstr(line, "macr") != NULL) {
            in_macro_section = 1;
            // Extract "something" from the line containing "macr"
            sscanf(line, "macr %s", output_filename);
            strcat(output_filename, ".txt"); // Append ".txt" extension
            // Open the output file for writing
            output_fp = fopen(output_filename, "w");
            if (output_fp == NULL) {
                perror("Error opening output file");
                fclose(input_fp);
                return;
            }
            // Skip the line containing "macr"
            continue;
        }
        if (strstr(line, "end_macr") != NULL) {
            // Stop collecting lines when "end_macr" is encountered
            break;
        }
        // If we are inside the macro section, write the line to output file
        if (in_macro_section) {
            fputs(line, output_fp);
        }
    }

    // Close files
    fclose(input_fp);
    fclose(output_fp);

    printf("Extracted and saved content between 'macr' and 'end_macr' to '%s'\n", output_filename);
}

int main() {
    extract_and_save("input.txt");

    return 0;
}
